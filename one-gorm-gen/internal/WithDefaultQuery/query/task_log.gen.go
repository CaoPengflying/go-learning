// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/plugin/dbresolver"
)

func newTaskLog(db *gorm.DB, opts ...gen.DOOption) taskLog {
	_taskLog := taskLog{}

	_taskLog.taskLogDo.UseDB(db, opts...)
	_taskLog.taskLogDo.UseModel(&model.TaskLog{})

	tableName := _taskLog.taskLogDo.TableName()
	_taskLog.ALL = field.NewAsterisk(tableName)
	_taskLog.ID = field.NewInt32(tableName, "id")
	_taskLog.UserID = field.NewInt32(tableName, "user_id")
	_taskLog.TaskID = field.NewInt32(tableName, "task_id")
	_taskLog.TaskLogName = field.NewString(tableName, "task_log_name")
	_taskLog.Input = field.NewString(tableName, "input")
	_taskLog.IsNamed = field.NewBool(tableName, "is_named")
	_taskLog.Status = field.NewInt32(tableName, "status")
	_taskLog.CreateTime = field.NewTime(tableName, "create_time")
	_taskLog.UpdateTime = field.NewTime(tableName, "update_time")
	_taskLog.CreateUserID = field.NewString(tableName, "create_user_id")
	_taskLog.UpdateUserID = field.NewString(tableName, "update_user_id")
	_taskLog.Extra = field.NewString(tableName, "extra")
	_taskLog.StepNow = field.NewInt32(tableName, "step_now")

	_taskLog.fillFieldMap()

	return _taskLog
}

// taskLog 任务流日志表
type taskLog struct {
	taskLogDo taskLogDo

	ALL          field.Asterisk
	ID           field.Int32
	UserID       field.Int32
	TaskID       field.Int32
	TaskLogName  field.String
	Input        field.String // 输入：wiki地址
	IsNamed      field.Bool   // 是否被手动命名过，没有的话就要存入wiki里面的标题
	Status       field.Int32  // 该任务流的状态:1创建中、2已完成、-1已删除
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	CreateUserID field.String // 创建人
	UpdateUserID field.String // 创建人
	Extra        field.String
	StepNow      field.Int32 // 这个任务执行到了哪一步

	fieldMap map[string]field.Expr
}

func (t taskLog) Table(newTableName string) *taskLog {
	t.taskLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskLog) As(alias string) *taskLog {
	t.taskLogDo.DO = *(t.taskLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskLog) updateTableName(table string) *taskLog {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.UserID = field.NewInt32(table, "user_id")
	t.TaskID = field.NewInt32(table, "task_id")
	t.TaskLogName = field.NewString(table, "task_log_name")
	t.Input = field.NewString(table, "input")
	t.IsNamed = field.NewBool(table, "is_named")
	t.Status = field.NewInt32(table, "status")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.CreateUserID = field.NewString(table, "create_user_id")
	t.UpdateUserID = field.NewString(table, "update_user_id")
	t.Extra = field.NewString(table, "extra")
	t.StepNow = field.NewInt32(table, "step_now")

	t.fillFieldMap()

	return t
}

func (t *taskLog) WithContext(ctx context.Context) *taskLogDo { return t.taskLogDo.WithContext(ctx) }

func (t taskLog) TableName() string { return t.taskLogDo.TableName() }

func (t taskLog) Alias() string { return t.taskLogDo.Alias() }

func (t taskLog) Columns(cols ...field.Expr) gen.Columns { return t.taskLogDo.Columns(cols...) }

func (t *taskLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.ID
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["task_id"] = t.TaskID
	t.fieldMap["task_log_name"] = t.TaskLogName
	t.fieldMap["input"] = t.Input
	t.fieldMap["is_named"] = t.IsNamed
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["create_user_id"] = t.CreateUserID
	t.fieldMap["update_user_id"] = t.UpdateUserID
	t.fieldMap["extra"] = t.Extra
	t.fieldMap["step_now"] = t.StepNow
}

func (t taskLog) clone(db *gorm.DB) taskLog {
	t.taskLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskLog) replaceDB(db *gorm.DB) taskLog {
	t.taskLogDo.ReplaceDB(db)
	return t
}

type taskLogDo struct{ gen.DO }

func (t taskLogDo) Debug() *taskLogDo {
	return t.withDO(t.DO.Debug())
}

func (t taskLogDo) WithContext(ctx context.Context) *taskLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskLogDo) ReadDB() *taskLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskLogDo) WriteDB() *taskLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskLogDo) Session(config *gorm.Session) *taskLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskLogDo) Clauses(conds ...clause.Expression) *taskLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskLogDo) Returning(value interface{}, columns ...string) *taskLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskLogDo) Not(conds ...gen.Condition) *taskLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskLogDo) Or(conds ...gen.Condition) *taskLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskLogDo) Select(conds ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskLogDo) Where(conds ...gen.Condition) *taskLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskLogDo) Order(conds ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskLogDo) Distinct(cols ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskLogDo) Omit(cols ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskLogDo) Join(table schema.Tabler, on ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskLogDo) Group(cols ...field.Expr) *taskLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskLogDo) Having(conds ...gen.Condition) *taskLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskLogDo) Limit(limit int) *taskLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskLogDo) Offset(offset int) *taskLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *taskLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskLogDo) Unscoped() *taskLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskLogDo) Create(values ...*model.TaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskLogDo) CreateInBatches(values []*model.TaskLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskLogDo) Save(values ...*model.TaskLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskLogDo) First() (*model.TaskLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskLog), nil
	}
}

func (t taskLogDo) Take() (*model.TaskLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskLog), nil
	}
}

func (t taskLogDo) Last() (*model.TaskLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskLog), nil
	}
}

func (t taskLogDo) Find() ([]*model.TaskLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskLog), err
}

func (t taskLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskLog, err error) {
	buf := make([]*model.TaskLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskLogDo) FindInBatches(result *[]*model.TaskLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskLogDo) Attrs(attrs ...field.AssignExpr) *taskLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskLogDo) Assign(attrs ...field.AssignExpr) *taskLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskLogDo) Joins(fields ...field.RelationField) *taskLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskLogDo) Preload(fields ...field.RelationField) *taskLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskLogDo) FirstOrInit() (*model.TaskLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskLog), nil
	}
}

func (t taskLogDo) FirstOrCreate() (*model.TaskLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskLog), nil
	}
}

func (t taskLogDo) FindByPage(offset int, limit int) (result []*model.TaskLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskLogDo) Delete(models ...*model.TaskLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskLogDo) withDO(do gen.Dao) *taskLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
