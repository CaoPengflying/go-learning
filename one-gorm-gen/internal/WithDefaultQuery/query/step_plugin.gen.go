// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/plugin/dbresolver"
)

func newStepPlugin(db *gorm.DB, opts ...gen.DOOption) stepPlugin {
	_stepPlugin := stepPlugin{}

	_stepPlugin.stepPluginDo.UseDB(db, opts...)
	_stepPlugin.stepPluginDo.UseModel(&model.StepPlugin{})

	tableName := _stepPlugin.stepPluginDo.TableName()
	_stepPlugin.ALL = field.NewAsterisk(tableName)
	_stepPlugin.ID = field.NewInt32(tableName, "id")
	_stepPlugin.StepID = field.NewInt32(tableName, "step_id")
	_stepPlugin.PluginID = field.NewInt32(tableName, "plugin_id")
	_stepPlugin.Sort = field.NewInt32(tableName, "sort")
	_stepPlugin.CreateTime = field.NewTime(tableName, "create_time")
	_stepPlugin.UpdateTime = field.NewTime(tableName, "update_time")
	_stepPlugin.CreateUserID = field.NewString(tableName, "create_user_id")
	_stepPlugin.UpdateUserID = field.NewString(tableName, "update_user_id")
	_stepPlugin.Extra = field.NewString(tableName, "extra")

	_stepPlugin.fillFieldMap()

	return _stepPlugin
}

// stepPlugin 步骤-插件表
type stepPlugin struct {
	stepPluginDo stepPluginDo

	ALL          field.Asterisk
	ID           field.Int32
	StepID       field.Int32
	PluginID     field.Int32
	Sort         field.Int32  // 标明该插件可以在哪一步骤的哪一阶段使用
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	CreateUserID field.String // 创建人
	UpdateUserID field.String // 创建人
	Extra        field.String

	fieldMap map[string]field.Expr
}

func (s stepPlugin) Table(newTableName string) *stepPlugin {
	s.stepPluginDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stepPlugin) As(alias string) *stepPlugin {
	s.stepPluginDo.DO = *(s.stepPluginDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stepPlugin) updateTableName(table string) *stepPlugin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.StepID = field.NewInt32(table, "step_id")
	s.PluginID = field.NewInt32(table, "plugin_id")
	s.Sort = field.NewInt32(table, "sort")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.CreateUserID = field.NewString(table, "create_user_id")
	s.UpdateUserID = field.NewString(table, "update_user_id")
	s.Extra = field.NewString(table, "extra")

	s.fillFieldMap()

	return s
}

func (s *stepPlugin) WithContext(ctx context.Context) *stepPluginDo {
	return s.stepPluginDo.WithContext(ctx)
}

func (s stepPlugin) TableName() string { return s.stepPluginDo.TableName() }

func (s stepPlugin) Alias() string { return s.stepPluginDo.Alias() }

func (s stepPlugin) Columns(cols ...field.Expr) gen.Columns { return s.stepPluginDo.Columns(cols...) }

func (s *stepPlugin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stepPlugin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["step_id"] = s.StepID
	s.fieldMap["plugin_id"] = s.PluginID
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["create_user_id"] = s.CreateUserID
	s.fieldMap["update_user_id"] = s.UpdateUserID
	s.fieldMap["extra"] = s.Extra
}

func (s stepPlugin) clone(db *gorm.DB) stepPlugin {
	s.stepPluginDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stepPlugin) replaceDB(db *gorm.DB) stepPlugin {
	s.stepPluginDo.ReplaceDB(db)
	return s
}

type stepPluginDo struct{ gen.DO }

func (s stepPluginDo) Debug() *stepPluginDo {
	return s.withDO(s.DO.Debug())
}

func (s stepPluginDo) WithContext(ctx context.Context) *stepPluginDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stepPluginDo) ReadDB() *stepPluginDo {
	return s.Clauses(dbresolver.Read)
}

func (s stepPluginDo) WriteDB() *stepPluginDo {
	return s.Clauses(dbresolver.Write)
}

func (s stepPluginDo) Session(config *gorm.Session) *stepPluginDo {
	return s.withDO(s.DO.Session(config))
}

func (s stepPluginDo) Clauses(conds ...clause.Expression) *stepPluginDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stepPluginDo) Returning(value interface{}, columns ...string) *stepPluginDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stepPluginDo) Not(conds ...gen.Condition) *stepPluginDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stepPluginDo) Or(conds ...gen.Condition) *stepPluginDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stepPluginDo) Select(conds ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stepPluginDo) Where(conds ...gen.Condition) *stepPluginDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stepPluginDo) Order(conds ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stepPluginDo) Distinct(cols ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stepPluginDo) Omit(cols ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stepPluginDo) Join(table schema.Tabler, on ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stepPluginDo) LeftJoin(table schema.Tabler, on ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stepPluginDo) RightJoin(table schema.Tabler, on ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stepPluginDo) Group(cols ...field.Expr) *stepPluginDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stepPluginDo) Having(conds ...gen.Condition) *stepPluginDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stepPluginDo) Limit(limit int) *stepPluginDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stepPluginDo) Offset(offset int) *stepPluginDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stepPluginDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *stepPluginDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stepPluginDo) Unscoped() *stepPluginDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stepPluginDo) Create(values ...*model.StepPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stepPluginDo) CreateInBatches(values []*model.StepPlugin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stepPluginDo) Save(values ...*model.StepPlugin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stepPluginDo) First() (*model.StepPlugin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepPlugin), nil
	}
}

func (s stepPluginDo) Take() (*model.StepPlugin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepPlugin), nil
	}
}

func (s stepPluginDo) Last() (*model.StepPlugin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepPlugin), nil
	}
}

func (s stepPluginDo) Find() ([]*model.StepPlugin, error) {
	result, err := s.DO.Find()
	return result.([]*model.StepPlugin), err
}

func (s stepPluginDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StepPlugin, err error) {
	buf := make([]*model.StepPlugin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stepPluginDo) FindInBatches(result *[]*model.StepPlugin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stepPluginDo) Attrs(attrs ...field.AssignExpr) *stepPluginDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stepPluginDo) Assign(attrs ...field.AssignExpr) *stepPluginDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stepPluginDo) Joins(fields ...field.RelationField) *stepPluginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stepPluginDo) Preload(fields ...field.RelationField) *stepPluginDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stepPluginDo) FirstOrInit() (*model.StepPlugin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepPlugin), nil
	}
}

func (s stepPluginDo) FirstOrCreate() (*model.StepPlugin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepPlugin), nil
	}
}

func (s stepPluginDo) FindByPage(offset int, limit int) (result []*model.StepPlugin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stepPluginDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stepPluginDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stepPluginDo) Delete(models ...*model.StepPlugin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stepPluginDo) withDO(do gen.Dao) *stepPluginDo {
	s.DO = *do.(*gen.DO)
	return s
}
