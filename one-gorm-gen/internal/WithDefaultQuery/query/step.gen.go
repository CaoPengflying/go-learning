// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/plugin/dbresolver"
)

func newStep(db *gorm.DB, opts ...gen.DOOption) step {
	_step := step{}

	_step.stepDo.UseDB(db, opts...)
	_step.stepDo.UseModel(&model.Step{})

	tableName := _step.stepDo.TableName()
	_step.ALL = field.NewAsterisk(tableName)
	_step.ID = field.NewInt32(tableName, "id")
	_step.TaskID = field.NewInt32(tableName, "task_id")
	_step.StepName = field.NewString(tableName, "step_name")
	_step.Type = field.NewInt32(tableName, "type")
	_step.InputPrompt = field.NewString(tableName, "input_prompt")
	_step.Status = field.NewInt32(tableName, "status")
	_step.ModelIds = field.NewString(tableName, "model_ids")
	_step.CreateTime = field.NewTime(tableName, "create_time")
	_step.UpdateTime = field.NewTime(tableName, "update_time")
	_step.CreateUserID = field.NewString(tableName, "create_user_id")
	_step.UpdateUserID = field.NewString(tableName, "update_user_id")
	_step.Extra = field.NewString(tableName, "extra")

	_step.fillFieldMap()

	return _step
}

// step 步骤表
type step struct {
	stepDo stepDo

	ALL          field.Asterisk
	ID           field.Int32
	TaskID       field.Int32
	StepName     field.String
	Type         field.Int32  // 类型：wiki、chat...
	InputPrompt  field.String // 预先设置的输入，告诉AI你是那种角色
	Status       field.Int32  // 状态：1创建中、2已完成、-1已删除
	ModelIds     field.String // 支持的模型ids
	CreateTime   field.Time   // 创建时间
	UpdateTime   field.Time   // 更新时间
	CreateUserID field.String // 创建人
	UpdateUserID field.String // 创建人
	Extra        field.String

	fieldMap map[string]field.Expr
}

func (s step) Table(newTableName string) *step {
	s.stepDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s step) As(alias string) *step {
	s.stepDo.DO = *(s.stepDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *step) updateTableName(table string) *step {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.TaskID = field.NewInt32(table, "task_id")
	s.StepName = field.NewString(table, "step_name")
	s.Type = field.NewInt32(table, "type")
	s.InputPrompt = field.NewString(table, "input_prompt")
	s.Status = field.NewInt32(table, "status")
	s.ModelIds = field.NewString(table, "model_ids")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.CreateUserID = field.NewString(table, "create_user_id")
	s.UpdateUserID = field.NewString(table, "update_user_id")
	s.Extra = field.NewString(table, "extra")

	s.fillFieldMap()

	return s
}

func (s *step) WithContext(ctx context.Context) *stepDo { return s.stepDo.WithContext(ctx) }

func (s step) TableName() string { return s.stepDo.TableName() }

func (s step) Alias() string { return s.stepDo.Alias() }

func (s step) Columns(cols ...field.Expr) gen.Columns { return s.stepDo.Columns(cols...) }

func (s *step) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *step) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["task_id"] = s.TaskID
	s.fieldMap["step_name"] = s.StepName
	s.fieldMap["type"] = s.Type
	s.fieldMap["input_prompt"] = s.InputPrompt
	s.fieldMap["status"] = s.Status
	s.fieldMap["model_ids"] = s.ModelIds
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["create_user_id"] = s.CreateUserID
	s.fieldMap["update_user_id"] = s.UpdateUserID
	s.fieldMap["extra"] = s.Extra
}

func (s step) clone(db *gorm.DB) step {
	s.stepDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s step) replaceDB(db *gorm.DB) step {
	s.stepDo.ReplaceDB(db)
	return s
}

type stepDo struct{ gen.DO }

func (s stepDo) Debug() *stepDo {
	return s.withDO(s.DO.Debug())
}

func (s stepDo) WithContext(ctx context.Context) *stepDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stepDo) ReadDB() *stepDo {
	return s.Clauses(dbresolver.Read)
}

func (s stepDo) WriteDB() *stepDo {
	return s.Clauses(dbresolver.Write)
}

func (s stepDo) Session(config *gorm.Session) *stepDo {
	return s.withDO(s.DO.Session(config))
}

func (s stepDo) Clauses(conds ...clause.Expression) *stepDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stepDo) Returning(value interface{}, columns ...string) *stepDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stepDo) Not(conds ...gen.Condition) *stepDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stepDo) Or(conds ...gen.Condition) *stepDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stepDo) Select(conds ...field.Expr) *stepDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stepDo) Where(conds ...gen.Condition) *stepDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stepDo) Order(conds ...field.Expr) *stepDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stepDo) Distinct(cols ...field.Expr) *stepDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stepDo) Omit(cols ...field.Expr) *stepDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stepDo) Join(table schema.Tabler, on ...field.Expr) *stepDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stepDo) LeftJoin(table schema.Tabler, on ...field.Expr) *stepDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stepDo) RightJoin(table schema.Tabler, on ...field.Expr) *stepDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stepDo) Group(cols ...field.Expr) *stepDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stepDo) Having(conds ...gen.Condition) *stepDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stepDo) Limit(limit int) *stepDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stepDo) Offset(offset int) *stepDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stepDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *stepDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stepDo) Unscoped() *stepDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stepDo) Create(values ...*model.Step) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stepDo) CreateInBatches(values []*model.Step, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stepDo) Save(values ...*model.Step) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stepDo) First() (*model.Step, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Step), nil
	}
}

func (s stepDo) Take() (*model.Step, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Step), nil
	}
}

func (s stepDo) Last() (*model.Step, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Step), nil
	}
}

func (s stepDo) Find() ([]*model.Step, error) {
	result, err := s.DO.Find()
	return result.([]*model.Step), err
}

func (s stepDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Step, err error) {
	buf := make([]*model.Step, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stepDo) FindInBatches(result *[]*model.Step, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stepDo) Attrs(attrs ...field.AssignExpr) *stepDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stepDo) Assign(attrs ...field.AssignExpr) *stepDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stepDo) Joins(fields ...field.RelationField) *stepDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stepDo) Preload(fields ...field.RelationField) *stepDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stepDo) FirstOrInit() (*model.Step, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Step), nil
	}
}

func (s stepDo) FirstOrCreate() (*model.Step, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Step), nil
	}
}

func (s stepDo) FindByPage(offset int, limit int) (result []*model.Step, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stepDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stepDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stepDo) Delete(models ...*model.Step) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stepDo) withDO(do gen.Dao) *stepDo {
	s.DO = *do.(*gen.DO)
	return s
}
