// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/gen/helper"

	"gorm.io/plugin/dbresolver"
)

func newStepLog(db *gorm.DB, opts ...gen.DOOption) stepLog {
	_stepLog := stepLog{}

	_stepLog.stepLogDo.UseDB(db, opts...)
	_stepLog.stepLogDo.UseModel(&model.StepLog{})

	tableName := _stepLog.stepLogDo.TableName()
	_stepLog.ALL = field.NewAsterisk(tableName)
	_stepLog.ID = field.NewInt32(tableName, "id")
	_stepLog.TaskID = field.NewInt32(tableName, "task_id")
	_stepLog.TaskLogID = field.NewInt32(tableName, "task_log_id")
	_stepLog.StepID = field.NewInt32(tableName, "step_id")
	_stepLog.AdditionalInput = field.NewString(tableName, "additional_input")
	_stepLog.Input = field.NewString(tableName, "input")
	_stepLog.Output = field.NewString(tableName, "output")
	_stepLog.PluginID = field.NewInt32(tableName, "plugin_id")
	_stepLog.CreateTime = field.NewTime(tableName, "create_time")
	_stepLog.UpdateTime = field.NewTime(tableName, "update_time")
	_stepLog.CreateUserID = field.NewString(tableName, "create_user_id")
	_stepLog.UpdateUserID = field.NewString(tableName, "update_user_id")
	_stepLog.Extra = field.NewString(tableName, "extra")
	_stepLog.Status = field.NewInt32(tableName, "status")

	_stepLog.fillFieldMap()

	return _stepLog
}

// stepLog step生成的日志
type stepLog struct {
	stepLogDo stepLogDo

	ALL             field.Asterisk
	ID              field.Int32
	TaskID          field.Int32
	TaskLogID       field.Int32
	StepID          field.Int32
	AdditionalInput field.String // 这一步骤里的附加输入
	Input           field.String // 这一步骤里的输入
	Output          field.String // 这一步骤里的输出
	PluginID        field.Int32  // 使用的插件id
	CreateTime      field.Time   // 创建时间
	UpdateTime      field.Time   // 更新时间
	CreateUserID    field.String // 创建人
	UpdateUserID    field.String // 创建人
	Extra           field.String
	Status          field.Int32 // 状态:1创建中、2已完成、-1已删除

	fieldMap map[string]field.Expr
}

func (s stepLog) Table(newTableName string) *stepLog {
	s.stepLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s stepLog) As(alias string) *stepLog {
	s.stepLogDo.DO = *(s.stepLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *stepLog) updateTableName(table string) *stepLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.TaskID = field.NewInt32(table, "task_id")
	s.TaskLogID = field.NewInt32(table, "task_log_id")
	s.StepID = field.NewInt32(table, "step_id")
	s.AdditionalInput = field.NewString(table, "additional_input")
	s.Input = field.NewString(table, "input")
	s.Output = field.NewString(table, "output")
	s.PluginID = field.NewInt32(table, "plugin_id")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.CreateUserID = field.NewString(table, "create_user_id")
	s.UpdateUserID = field.NewString(table, "update_user_id")
	s.Extra = field.NewString(table, "extra")
	s.Status = field.NewInt32(table, "status")

	s.fillFieldMap()

	return s
}

func (s *stepLog) WithContext(ctx context.Context) IStepLogDo { return s.stepLogDo.WithContext(ctx) }

func (s stepLog) TableName() string { return s.stepLogDo.TableName() }

func (s stepLog) Alias() string { return s.stepLogDo.Alias() }

func (s stepLog) Columns(cols ...field.Expr) gen.Columns { return s.stepLogDo.Columns(cols...) }

func (s *stepLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *stepLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["task_id"] = s.TaskID
	s.fieldMap["task_log_id"] = s.TaskLogID
	s.fieldMap["step_id"] = s.StepID
	s.fieldMap["additional_input"] = s.AdditionalInput
	s.fieldMap["input"] = s.Input
	s.fieldMap["output"] = s.Output
	s.fieldMap["plugin_id"] = s.PluginID
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["create_user_id"] = s.CreateUserID
	s.fieldMap["update_user_id"] = s.UpdateUserID
	s.fieldMap["extra"] = s.Extra
	s.fieldMap["status"] = s.Status
}

func (s stepLog) clone(db *gorm.DB) stepLog {
	s.stepLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s stepLog) replaceDB(db *gorm.DB) stepLog {
	s.stepLogDo.ReplaceDB(db)
	return s
}

type stepLogDo struct{ gen.DO }

type IStepLogDo interface {
	gen.SubQuery
	Debug() IStepLogDo
	WithContext(ctx context.Context) IStepLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IStepLogDo
	WriteDB() IStepLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IStepLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IStepLogDo
	Not(conds ...gen.Condition) IStepLogDo
	Or(conds ...gen.Condition) IStepLogDo
	Select(conds ...field.Expr) IStepLogDo
	Where(conds ...gen.Condition) IStepLogDo
	Order(conds ...field.Expr) IStepLogDo
	Distinct(cols ...field.Expr) IStepLogDo
	Omit(cols ...field.Expr) IStepLogDo
	Join(table schema.Tabler, on ...field.Expr) IStepLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IStepLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IStepLogDo
	Group(cols ...field.Expr) IStepLogDo
	Having(conds ...gen.Condition) IStepLogDo
	Limit(limit int) IStepLogDo
	Offset(offset int) IStepLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IStepLogDo
	Unscoped() IStepLogDo
	Create(values ...*model.StepLog) error
	CreateInBatches(values []*model.StepLog, batchSize int) error
	Save(values ...*model.StepLog) error
	First() (*model.StepLog, error)
	Take() (*model.StepLog, error)
	Last() (*model.StepLog, error)
	Find() ([]*model.StepLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StepLog, err error)
	FindInBatches(result *[]*model.StepLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.StepLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IStepLogDo
	Assign(attrs ...field.AssignExpr) IStepLogDo
	Joins(fields ...field.RelationField) IStepLogDo
	Preload(fields ...field.RelationField) IStepLogDo
	FirstOrInit() (*model.StepLog, error)
	FirstOrCreate() (*model.StepLog, error)
	FindByPage(offset int, limit int) (result []*model.StepLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IStepLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s stepLogDo) Debug() IStepLogDo {
	return s.withDO(s.DO.Debug())
}

func (s stepLogDo) WithContext(ctx context.Context) IStepLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s stepLogDo) ReadDB() IStepLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s stepLogDo) WriteDB() IStepLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s stepLogDo) Session(config *gorm.Session) IStepLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s stepLogDo) Clauses(conds ...clause.Expression) IStepLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s stepLogDo) Returning(value interface{}, columns ...string) IStepLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s stepLogDo) Not(conds ...gen.Condition) IStepLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s stepLogDo) Or(conds ...gen.Condition) IStepLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s stepLogDo) Select(conds ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s stepLogDo) Where(conds ...gen.Condition) IStepLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s stepLogDo) Order(conds ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s stepLogDo) Distinct(cols ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s stepLogDo) Omit(cols ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s stepLogDo) Join(table schema.Tabler, on ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s stepLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s stepLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s stepLogDo) Group(cols ...field.Expr) IStepLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s stepLogDo) Having(conds ...gen.Condition) IStepLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s stepLogDo) Limit(limit int) IStepLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s stepLogDo) Offset(offset int) IStepLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s stepLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IStepLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s stepLogDo) Unscoped() IStepLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s stepLogDo) Create(values ...*model.StepLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s stepLogDo) CreateInBatches(values []*model.StepLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s stepLogDo) Save(values ...*model.StepLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s stepLogDo) First() (*model.StepLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepLog), nil
	}
}

func (s stepLogDo) Take() (*model.StepLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepLog), nil
	}
}

func (s stepLogDo) Last() (*model.StepLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepLog), nil
	}
}

func (s stepLogDo) Find() ([]*model.StepLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.StepLog), err
}

func (s stepLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StepLog, err error) {
	buf := make([]*model.StepLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s stepLogDo) FindInBatches(result *[]*model.StepLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s stepLogDo) Attrs(attrs ...field.AssignExpr) IStepLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s stepLogDo) Assign(attrs ...field.AssignExpr) IStepLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s stepLogDo) Joins(fields ...field.RelationField) IStepLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s stepLogDo) Preload(fields ...field.RelationField) IStepLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s stepLogDo) FirstOrInit() (*model.StepLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepLog), nil
	}
}

func (s stepLogDo) FirstOrCreate() (*model.StepLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StepLog), nil
	}
}

func (s stepLogDo) FindByPage(offset int, limit int) (result []*model.StepLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s stepLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s stepLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s stepLogDo) Delete(models ...*model.StepLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *stepLogDo) withDO(do gen.Dao) *stepLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
